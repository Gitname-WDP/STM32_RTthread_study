; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\objects\system_stm32f10x.o --asm_dir=..\Output\Listings\ --list_dir=..\Output\Listings\ --depend=..\output\objects\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Core\Inc -I..\Driver -I..\Driver\Inc -I..\Middle\Inc -I..\rtthread\include -I..\rtthread\include\libc -I..\rtthread\components\finsh -I..\rtthread -I..\rtthread\components\drivers\include -ID:\Software\Keil\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Software\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=539 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DRT_USING_DEVICE --omf_browse=..\output\objects\system_stm32f10x.crf ..\Core\Src\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=1

                  SetSysClock PROC
;;;414      */
;;;415    static void SetSysClock(void)
000000  b510              PUSH     {r4,lr}
;;;416    {
;;;417    #ifdef SYSCLK_FREQ_HSE
;;;418      SetSysClockToHSE();
;;;419    #elif defined SYSCLK_FREQ_24MHz
;;;420      SetSysClockTo24();
;;;421    #elif defined SYSCLK_FREQ_36MHz
;;;422      SetSysClockTo36();
;;;423    #elif defined SYSCLK_FREQ_48MHz
;;;424      SetSysClockTo48();
;;;425    #elif defined SYSCLK_FREQ_56MHz
;;;426      SetSysClockTo56();  
;;;427    #elif defined SYSCLK_FREQ_72MHz
;;;428      SetSysClockTo72();
000002  f7fffffe          BL       SetSysClockTo72
;;;429    #endif
;;;430     
;;;431     /* If none of the define above is enabled, the HSI is used as System clock
;;;432        source (default after reset) */ 
;;;433    }
000006  bd10              POP      {r4,pc}
;;;434    
                          ENDP


                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;982      */
;;;983    static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;984    {
;;;985      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;986      
;;;987      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;988      /* Enable HSE */    
;;;989      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4833              LDR      r0,|L2.216|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4931              LDR      r1,|L2.216|
000012  6008              STR      r0,[r1,#0]
;;;990     
;;;991      /* Wait till HSE is ready and if Time out is reached exit */
;;;992      do
000014  bf00              NOP      
                  |L2.22|
;;;993      {
;;;994        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4830              LDR      r0,|L2.216|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;995        StartUpCounter++;  
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;996      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L2.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L2.22|
                  |L2.50|
;;;997    
;;;998      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4829              LDR      r0,|L2.216|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L2.66|
;;;999      {
;;;1000       HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L2.70|
                  |L2.66|
;;;1001     }
;;;1002     else
;;;1003     {
;;;1004       HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L2.70|
;;;1005     }  
;;;1006   
;;;1007     if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d143              BNE      |L2.212|
;;;1008     {
;;;1009       /* Enable Prefetch Buffer */
;;;1010       FLASH->ACR |= FLASH_ACR_PRFTBE;
00004c  4823              LDR      r0,|L2.220|
00004e  6800              LDR      r0,[r0,#0]
000050  f0400010          ORR      r0,r0,#0x10
000054  4921              LDR      r1,|L2.220|
000056  6008              STR      r0,[r1,#0]
;;;1011   
;;;1012       /* Flash 2 wait state */
;;;1013       FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200003          BIC      r0,r0,#3
000060  6008              STR      r0,[r1,#0]
;;;1014       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]
000066  f0400002          ORR      r0,r0,#2
00006a  6008              STR      r0,[r1,#0]
;;;1015   
;;;1016    
;;;1017       /* HCLK = SYSCLK */
;;;1018       RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00006c  481a              LDR      r0,|L2.216|
00006e  6840              LDR      r0,[r0,#4]
000070  4919              LDR      r1,|L2.216|
000072  6048              STR      r0,[r1,#4]
;;;1019         
;;;1020       /* PCLK2 = HCLK */
;;;1021       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000074  4608              MOV      r0,r1
000076  6840              LDR      r0,[r0,#4]
000078  6048              STR      r0,[r1,#4]
;;;1022       
;;;1023       /* PCLK1 = HCLK */
;;;1024       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00007a  4608              MOV      r0,r1
00007c  6840              LDR      r0,[r0,#4]
00007e  f4406080          ORR      r0,r0,#0x400
000082  6048              STR      r0,[r1,#4]
;;;1025   
;;;1026   #ifdef STM32F10X_CL
;;;1027       /* Configure PLLs ------------------------------------------------------*/
;;;1028       /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;1029       /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;1030           
;;;1031       RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;1032                                 RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;1033       RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;1034                                RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;1035     
;;;1036       /* Enable PLL2 */
;;;1037       RCC->CR |= RCC_CR_PLL2ON;
;;;1038       /* Wait till PLL2 is ready */
;;;1039       while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;1040       {
;;;1041       }
;;;1042       
;;;1043      
;;;1044       /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;1045       RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;1046       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;1047                               RCC_CFGR_PLLMULL9); 
;;;1048   #else    
;;;1049       /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;1050       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000084  4608              MOV      r0,r1
000086  6840              LDR      r0,[r0,#4]
000088  f420107c          BIC      r0,r0,#0x3f0000
00008c  6048              STR      r0,[r1,#4]
;;;1051                                           RCC_CFGR_PLLMULL));
;;;1052       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00008e  4608              MOV      r0,r1
000090  6840              LDR      r0,[r0,#4]
000092  f44010e8          ORR      r0,r0,#0x1d0000
000096  6048              STR      r0,[r1,#4]
;;;1053   #endif /* STM32F10X_CL */
;;;1054   
;;;1055       /* Enable PLL */
;;;1056       RCC->CR |= RCC_CR_PLLON;
000098  4608              MOV      r0,r1
00009a  6800              LDR      r0,[r0,#0]
00009c  f0407080          ORR      r0,r0,#0x1000000
0000a0  6008              STR      r0,[r1,#0]
;;;1057   
;;;1058       /* Wait till PLL is ready */
;;;1059       while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000a2  bf00              NOP      
                  |L2.164|
0000a4  480c              LDR      r0,|L2.216|
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f0007000          AND      r0,r0,#0x2000000
0000ac  2800              CMP      r0,#0
0000ae  d0f9              BEQ      |L2.164|
;;;1060       {
;;;1061       }
;;;1062       
;;;1063       /* Select PLL as system clock source */
;;;1064       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  4809              LDR      r0,|L2.216|
0000b2  6840              LDR      r0,[r0,#4]
0000b4  f0200003          BIC      r0,r0,#3
0000b8  4907              LDR      r1,|L2.216|
0000ba  6048              STR      r0,[r1,#4]
;;;1065       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000bc  4608              MOV      r0,r1
0000be  6840              LDR      r0,[r0,#4]
0000c0  f0400002          ORR      r0,r0,#2
0000c4  6048              STR      r0,[r1,#4]
;;;1066   
;;;1067       /* Wait till PLL is used as system clock source */
;;;1068       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000c6  bf00              NOP      
                  |L2.200|
0000c8  4803              LDR      r0,|L2.216|
0000ca  6840              LDR      r0,[r0,#4]
0000cc  f000000c          AND      r0,r0,#0xc
0000d0  2808              CMP      r0,#8
0000d2  d1f9              BNE      |L2.200|
                  |L2.212|
;;;1069       {
;;;1070       }
;;;1071     }
;;;1072     else
;;;1073     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1074            configuration. User can add here some code to deal with this error */
;;;1075     }
;;;1076   }
0000d4  bd0c              POP      {r2,r3,pc}
;;;1077   #endif
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      0x40021000
                  |L2.220|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;301      */
;;;302    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000002  2100              MOVS     r1,#0
000004  2000              MOVS     r0,#0
000006  2200              MOVS     r2,#0
;;;305    
;;;306    #ifdef  STM32F10X_CL
;;;307      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;308    #endif /* STM32F10X_CL */
;;;309    
;;;310    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;311      uint32_t prediv1factor = 0;
;;;312    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;313        
;;;314      /* Get SYSCLK source -------------------------------------------------------*/
;;;315      tmp = RCC->CFGR & RCC_CFGR_SWS;
000008  4b21              LDR      r3,|L3.144|
00000a  685b              LDR      r3,[r3,#4]
00000c  f003010c          AND      r1,r3,#0xc
;;;316      
;;;317      switch (tmp)
000010  b121              CBZ      r1,|L3.28|
000012  2904              CMP      r1,#4
000014  d006              BEQ      |L3.36|
000016  2908              CMP      r1,#8
000018  d128              BNE      |L3.108|
00001a  e007              B        |L3.44|
                  |L3.28|
;;;318      {
;;;319        case 0x00:  /* HSI used as system clock */
;;;320          SystemCoreClock = HSI_VALUE;
00001c  4b1d              LDR      r3,|L3.148|
00001e  4c1e              LDR      r4,|L3.152|
000020  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;321          break;
000022  e027              B        |L3.116|
                  |L3.36|
;;;322        case 0x04:  /* HSE used as system clock */
;;;323          SystemCoreClock = HSE_VALUE;
000024  4b1b              LDR      r3,|L3.148|
000026  4c1c              LDR      r4,|L3.152|
000028  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;324          break;
00002a  e023              B        |L3.116|
                  |L3.44|
;;;325        case 0x08:  /* PLL used as system clock */
;;;326    
;;;327          /* Get PLL clock source and multiplication factor ----------------------*/
;;;328          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
00002c  4b18              LDR      r3,|L3.144|
00002e  685b              LDR      r3,[r3,#4]
000030  f4031070          AND      r0,r3,#0x3c0000
;;;329          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000034  4b16              LDR      r3,|L3.144|
000036  685b              LDR      r3,[r3,#4]
000038  f4033280          AND      r2,r3,#0x10000
;;;330          
;;;331    #ifndef STM32F10X_CL      
;;;332          pllmull = ( pllmull >> 18) + 2;
00003c  2302              MOVS     r3,#2
00003e  eb034090          ADD      r0,r3,r0,LSR #18
;;;333          
;;;334          if (pllsource == 0x00)
000042  b922              CBNZ     r2,|L3.78|
;;;335          {
;;;336            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;337            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000044  4b15              LDR      r3,|L3.156|
000046  4343              MULS     r3,r0,r3
000048  4c13              LDR      r4,|L3.152|
00004a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
00004c  e00d              B        |L3.106|
                  |L3.78|
;;;338          }
;;;339          else
;;;340          {
;;;341     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;342           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;343           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;344           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;345     #else
;;;346            /* HSE selected as PLL clock entry */
;;;347            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
00004e  4b10              LDR      r3,|L3.144|
000050  685b              LDR      r3,[r3,#4]
000052  f4033300          AND      r3,r3,#0x20000
000056  b123              CBZ      r3,|L3.98|
;;;348            {/* HSE oscillator clock divided by 2 */
;;;349              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
000058  4b10              LDR      r3,|L3.156|
00005a  4343              MULS     r3,r0,r3
00005c  4c0e              LDR      r4,|L3.152|
00005e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000060  e003              B        |L3.106|
                  |L3.98|
;;;350            }
;;;351            else
;;;352            {
;;;353              SystemCoreClock = HSE_VALUE * pllmull;
000062  4b0c              LDR      r3,|L3.148|
000064  4343              MULS     r3,r0,r3
000066  4c0c              LDR      r4,|L3.152|
000068  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L3.106|
;;;354            }
;;;355     #endif
;;;356          }
;;;357    #else
;;;358          pllmull = pllmull >> 18;
;;;359          
;;;360          if (pllmull != 0x0D)
;;;361          {
;;;362             pllmull += 2;
;;;363          }
;;;364          else
;;;365          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;366            pllmull = 13 / 2; 
;;;367          }
;;;368                
;;;369          if (pllsource == 0x00)
;;;370          {
;;;371            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;372            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;373          }
;;;374          else
;;;375          {/* PREDIV1 selected as PLL clock entry */
;;;376            
;;;377            /* Get PREDIV1 clock source and division factor */
;;;378            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;379            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;380            
;;;381            if (prediv1source == 0)
;;;382            { 
;;;383              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;384              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;385            }
;;;386            else
;;;387            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;388              
;;;389              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;390              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;391              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;392              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;393            }
;;;394          }
;;;395    #endif /* STM32F10X_CL */ 
;;;396          break;
00006a  e003              B        |L3.116|
                  |L3.108|
;;;397    
;;;398        default:
;;;399          SystemCoreClock = HSI_VALUE;
00006c  4b09              LDR      r3,|L3.148|
00006e  4c0a              LDR      r4,|L3.152|
000070  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;400          break;
000072  bf00              NOP      
                  |L3.116|
000074  bf00              NOP                            ;321
;;;401      }
;;;402      
;;;403      /* Compute HCLK clock frequency ----------------*/
;;;404      /* Get HCLK prescaler */
;;;405      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000076  4b06              LDR      r3,|L3.144|
000078  685b              LDR      r3,[r3,#4]
00007a  f3c31303          UBFX     r3,r3,#4,#4
00007e  4c08              LDR      r4,|L3.160|
000080  5ce1              LDRB     r1,[r4,r3]
;;;406      /* HCLK clock frequency */
;;;407      SystemCoreClock >>= tmp;  
000082  4b05              LDR      r3,|L3.152|
000084  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
000086  40cb              LSRS     r3,r3,r1
000088  4c03              LDR      r4,|L3.152|
00008a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;408    }
00008c  bd10              POP      {r4,pc}
;;;409    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x40021000
                  |L3.148|
                          DCD      0x007a1200
                  |L3.152|
                          DCD      SystemCoreClock
                  |L3.156|
                          DCD      0x003d0900
                  |L3.160|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;207      */
;;;208    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;211      /* Set HSION bit */
;;;212      RCC->CR |= (uint32_t)0x00000001;
000002  4813              LDR      r0,|L4.80|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4911              LDR      r1,|L4.80|
00000c  6008              STR      r0,[r1,#0]
;;;213    
;;;214      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;215    #ifndef STM32F10X_CL
;;;216      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4910              LDR      r1,|L4.84|
000014  4008              ANDS     r0,r0,r1
000016  490e              LDR      r1,|L4.80|
000018  6048              STR      r0,[r1,#4]
;;;217    #else
;;;218      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;219    #endif /* STM32F10X_CL */   
;;;220      
;;;221      /* Reset HSEON, CSSON and PLLON bits */
;;;222      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  490e              LDR      r1,|L4.88|
000020  4008              ANDS     r0,r0,r1
000022  490b              LDR      r1,|L4.80|
000024  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Reset HSEBYP bit */
;;;225      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;226    
;;;227      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;228      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f42000fe          BIC      r0,r0,#0x7f0000
000038  6048              STR      r0,[r1,#4]
;;;229    
;;;230    #ifdef STM32F10X_CL
;;;231      /* Reset PLL2ON and PLL3ON bits */
;;;232      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;233    
;;;234      /* Disable all interrupts and clear pending bits  */
;;;235      RCC->CIR = 0x00FF0000;
;;;236    
;;;237      /* Reset CFGR2 register */
;;;238      RCC->CFGR2 = 0x00000000;
;;;239    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;240      /* Disable all interrupts and clear pending bits  */
;;;241      RCC->CIR = 0x009F0000;
;;;242    
;;;243      /* Reset CFGR2 register */
;;;244      RCC->CFGR2 = 0x00000000;      
;;;245    #else
;;;246      /* Disable all interrupts and clear pending bits  */
;;;247      RCC->CIR = 0x009F0000;
00003a  f44f001f          MOV      r0,#0x9f0000
00003e  6088              STR      r0,[r1,#8]
;;;248    #endif /* STM32F10X_CL */
;;;249        
;;;250    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;251      #ifdef DATA_IN_ExtSRAM
;;;252        SystemInit_ExtMemCtl(); 
;;;253      #endif /* DATA_IN_ExtSRAM */
;;;254    #endif 
;;;255    
;;;256      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;257      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;258      SetSysClock();
000040  f7fffffe          BL       SetSysClock
;;;259    
;;;260    #ifdef VECT_TAB_SRAM
;;;261      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;262    #else
;;;263      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000044  f04f6000          MOV      r0,#0x8000000
000048  4904              LDR      r1,|L4.92|
00004a  6008              STR      r0,[r1,#0]
;;;264    #endif 
;;;265    }
00004c  bd10              POP      {r4,pc}
;;;266    
                          ENDP

00004e  0000              DCW      0x0000
                  |L4.80|
                          DCD      0x40021000
                  |L4.84|
                          DCD      0xf8ff0000
                  |L4.88|
                          DCD      0xfef6ffff
                  |L4.92|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\Core\\Src\\system_stm32f10x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REV16|
#line 463 "..\\Core\\Inc\\cmsis_armcc.h"
|__asm___18_system_stm32f10x_c_5d646a67____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REVSH|
#line 478
|__asm___18_system_stm32f10x_c_5d646a67____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____RRX|
#line 665
|__asm___18_system_stm32f10x_c_5d646a67____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
