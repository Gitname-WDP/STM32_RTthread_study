; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\objects\board.o --asm_dir=..\Output\Listings\ --list_dir=..\Output\Listings\ --depend=..\output\objects\board.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Core\Inc -I..\Driver -I..\Driver\Inc -I..\Middle\Inc -I..\rtthread\include -I..\rtthread\include\libc -I..\rtthread\components\finsh -I..\rtthread -I..\rtthread\components\drivers\include -ID:\Software\Keil\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Software\Keil\ARM\CMSIS\Include -D__UVISION_VERSION=539 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DRT_USING_DEVICE --omf_browse=..\output\objects\board.crf ..\rtthread\board.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;92     
;;;93     void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;94     {
;;;95     	/* enter interrupt */
;;;96     	rt_interrupt_enter();
000002  f7fffffe          BL       rt_interrupt_enter
;;;97     
;;;98     	rt_tick_increase();
000006  f7fffffe          BL       rt_tick_increase
;;;99     
;;;100    	/* leave interrupt */
;;;101    	rt_interrupt_leave();
00000a  f7fffffe          BL       rt_interrupt_leave
;;;102    }
00000e  bd10              POP      {r4,pc}
;;;103    
                          ENDP


                          AREA ||i._SysTick_Config||, CODE, READONLY, ALIGN=2

                  _SysTick_Config PROC
;;;33     
;;;34     static uint32_t _SysTick_Config(rt_uint32_t ticks)
000000  4601              MOV      r1,r0
;;;35     {
;;;36         if ((ticks - 1) > 0xFFFFFF)
000002  1e48              SUBS     r0,r1,#1
000004  f1b07f80          CMP      r0,#0x1000000
000008  d301              BCC      |L2.14|
;;;37         {
;;;38             return 1;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;39         }
;;;40         
;;;41         _SYSTICK_LOAD = ticks - 1; 
;;;42         _SYSTICK_PRI = 0xFF;
;;;43         _SYSTICK_VAL  = 0;
;;;44         _SYSTICK_CTRL = 0x07;  
;;;45         
;;;46         return 0;
;;;47     }
00000c  4770              BX       lr
                  |L2.14|
00000e  1e48              SUBS     r0,r1,#1              ;41
000010  f04f22e0          MOV      r2,#0xe000e000        ;41
000014  6150              STR      r0,[r2,#0x14]         ;41
000016  20ff              MOVS     r0,#0xff              ;42
000018  4a04              LDR      r2,|L2.44|
00001a  7010              STRB     r0,[r2,#0]            ;42
00001c  2000              MOVS     r0,#0                 ;43
00001e  f04f22e0          MOV      r2,#0xe000e000        ;43
000022  6190              STR      r0,[r2,#0x18]         ;43
000024  2007              MOVS     r0,#7                 ;44
000026  6110              STR      r0,[r2,#0x10]         ;44
000028  2000              MOVS     r0,#0                 ;46
00002a  e7ef              B        |L2.12|
;;;48     
                          ENDP

                  |L2.44|
                          DCD      0xe000ed23

                          AREA ||i.rt_heap_begin_get||, CODE, READONLY, ALIGN=2

                  rt_heap_begin_get PROC
;;;51     static uint32_t rt_heap[RT_HEAP_SIZE];	// heap default size: 4K(1024 * 4)
;;;52     RT_WEAK void *rt_heap_begin_get(void)
000000  4800              LDR      r0,|L3.4|
;;;53     {
;;;54         return rt_heap;
;;;55     }
000002  4770              BX       lr
;;;56     
                          ENDP

                  |L3.4|
                          DCD      rt_heap

                          AREA ||i.rt_heap_end_get||, CODE, READONLY, ALIGN=2

                  rt_heap_end_get PROC
;;;56     
;;;57     RT_WEAK void *rt_heap_end_get(void)
000000  4800              LDR      r0,|L4.4|
;;;58     {
;;;59         return rt_heap + RT_HEAP_SIZE;
;;;60     }
000002  4770              BX       lr
;;;61     #endif
                          ENDP

                  |L4.4|
                          DCD      rt_heap+0x1000

                          AREA ||i.rt_hw_board_init||, CODE, READONLY, ALIGN=2

                  rt_hw_board_init PROC
;;;65      */
;;;66     void rt_hw_board_init()
000000  b570              PUSH     {r4-r6,lr}
;;;67     {	
;;;68     
;;;69     	/* System Tick Configuration */
;;;70     	SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
000002  4826              LDR      r0,|L5.156|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  f44f727a          MOV      r2,#0x3e8
00000a  fbb0f1f2          UDIV     r1,r0,r2
00000e  1e48              SUBS     r0,r1,#1
000010  f1b07f80          CMP      r0,#0x1000000
000014  d300              BCC      |L5.24|
000016  e01b              B        |L5.80|
                  |L5.24|
000018  1e48              SUBS     r0,r1,#1
00001a  f04f22e0          MOV      r2,#0xe000e000
00001e  6150              STR      r0,[r2,#0x14]
000020  1750              ASRS     r0,r2,#29
000022  220f              MOVS     r2,#0xf
000024  2800              CMP      r0,#0
000026  db04              BLT      |L5.50|
000028  0713              LSLS     r3,r2,#28
00002a  0e1c              LSRS     r4,r3,#24
00002c  4b1c              LDR      r3,|L5.160|
00002e  541c              STRB     r4,[r3,r0]
000030  e006              B        |L5.64|
                  |L5.50|
000032  0713              LSLS     r3,r2,#28
000034  0e1d              LSRS     r5,r3,#24
000036  4b1b              LDR      r3,|L5.164|
000038  f000040f          AND      r4,r0,#0xf
00003c  1f24              SUBS     r4,r4,#4
00003e  551d              STRB     r5,[r3,r4]
                  |L5.64|
000040  bf00              NOP      
000042  2000              MOVS     r0,#0
000044  f04f22e0          MOV      r2,#0xe000e000
000048  6190              STR      r0,[r2,#0x18]
00004a  2007              MOVS     r0,#7
00004c  6110              STR      r0,[r2,#0x10]
00004e  bf00              NOP      
                  |L5.80|
;;;71     
;;;72         /* Call components board initial (use INIT_BOARD_EXPORT()) */
;;;73     #ifdef RT_USING_COMPONENTS_INIT
;;;74         rt_components_board_init();
000050  f7fffffe          BL       rt_components_board_init
;;;75     #endif
;;;76         
;;;77     #if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
;;;78     	rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
000054  a014              ADR      r0,|L5.168|
000056  f7fffffe          BL       rt_console_set_device
;;;79     #endif
;;;80         
;;;81     #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
;;;82         rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
00005a  f7fffffe          BL       rt_heap_end_get
00005e  4604              MOV      r4,r0
000060  f7fffffe          BL       rt_heap_begin_get
000064  4605              MOV      r5,r0
000066  4621              MOV      r1,r4
000068  f7fffffe          BL       rt_system_heap_init
;;;83     #endif
;;;84     	//硬件初始化
;;;85     	NVIC_SetPriorityGrouping(NVIC_PriorityGroup_2);		//中断优先级设置
00006c  f44f61a0          MOV      r1,#0x500
000070  f0010207          AND      r2,r1,#7
000074  4b0b              LDR      r3,|L5.164|
000076  3b0c              SUBS     r3,r3,#0xc
000078  6818              LDR      r0,[r3,#0]
00007a  f64f03ff          MOV      r3,#0xf8ff
00007e  4018              ANDS     r0,r0,r3
000080  4b0b              LDR      r3,|L5.176|
000082  4303              ORRS     r3,r3,r0
000084  ea432002          ORR      r0,r3,r2,LSL #8
000088  4b06              LDR      r3,|L5.164|
00008a  3b0c              SUBS     r3,r3,#0xc
00008c  6018              STR      r0,[r3,#0]
00008e  bf00              NOP      
;;;86     //	uart_init();
;;;87     //	rgbInit();
;;;88     	usart2Init();
000090  f7fffffe          BL       usart2Init
;;;89     	BuzzerInit();
000094  f7fffffe          BL       BuzzerInit
;;;90     
;;;91     }
000098  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

00009a  0000              DCW      0x0000
                  |L5.156|
                          DCD      SystemCoreClock
                  |L5.160|
                          DCD      0xe000e400
                  |L5.164|
                          DCD      0xe000ed18
                  |L5.168|
0000a8  75617274          DCB      "uart1",0
0000ac  3100    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L5.176|
                          DCD      0x05fa0000

                          AREA ||i.rt_hw_console_output||, CODE, READONLY, ALIGN=2

                  rt_hw_console_output PROC
;;;116     
;;;117    void rt_hw_console_output(const char *str)
000000  b510              PUSH     {r4,lr}
;;;118    {
000002  4604              MOV      r4,r0
;;;119    //#error "TODO 3: Output the string 'str' through the uart."
;;;120            /* empty console output */
;;;121        rt_enter_critical();
000004  f7fffffe          BL       rt_enter_critical
;;;122    
;;;123    	/* 直到字符串结束 */
;;;124    	while ( *str != '\0' )
000008  e019              B        |L6.62|
                  |L6.10|
;;;125        {
;;;126            /* 换行 */
;;;127            //RT-Thread 系统中已有的打印均以 \n 结尾，而并非 \r\n，所以在字符输出时，需要在输出 \n 之前输出 \r，完成回车与换行，否则系统打印出来的信息将只有换行
;;;128            if ( *str == '\n' )
00000a  7820              LDRB     r0,[r4,#0]
00000c  280a              CMP      r0,#0xa
00000e  d10a              BNE      |L6.38|
;;;129            {
;;;130                USART_SendData(USART1, '\r' );
000010  210d              MOVS     r1,#0xd
000012  480e              LDR      r0,|L6.76|
000014  f7fffffe          BL       USART_SendData
;;;131                while ( USART_GetFlagStatus( USART1, USART_FLAG_TXE ) == RESET );
000018  bf00              NOP      
                  |L6.26|
00001a  2180              MOVS     r1,#0x80
00001c  480b              LDR      r0,|L6.76|
00001e  f7fffffe          BL       USART_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L6.26|
                  |L6.38|
;;;132            }
;;;133     
;;;134            USART_SendData( USART1, *str++ );
000026  f8141b01          LDRB     r1,[r4],#1
00002a  4808              LDR      r0,|L6.76|
00002c  f7fffffe          BL       USART_SendData
;;;135            while ( USART_GetFlagStatus( USART1, USART_FLAG_TXE ) == RESET );
000030  bf00              NOP      
                  |L6.50|
000032  2180              MOVS     r1,#0x80
000034  4805              LDR      r0,|L6.76|
000036  f7fffffe          BL       USART_GetFlagStatus
00003a  2800              CMP      r0,#0
00003c  d0f9              BEQ      |L6.50|
                  |L6.62|
00003e  7820              LDRB     r0,[r4,#0]            ;124
000040  2800              CMP      r0,#0                 ;124
000042  d1e2              BNE      |L6.10|
;;;136    	}
;;;137    	
;;;138        rt_exit_critical();
000044  f7fffffe          BL       rt_exit_critical
;;;139    }
000048  bd10              POP      {r4,pc}
;;;140    
                          ENDP

00004a  0000              DCW      0x0000
                  |L6.76|
                          DCD      0x40013800

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=1

                  uart_init PROC
;;;105     
;;;106    static int uart_init(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108    //#error "TODO 2: Enable the hardware uart and config baudrate."
;;;109        usart1Init();
000002  f7fffffe          BL       usart1Init
;;;110        return 0;
000006  2000              MOVS     r0,#0
;;;111    }
000008  bd10              POP      {r4,pc}
;;;112    INIT_BOARD_EXPORT(uart_init);
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  rt_heap
                          %        4096

                          AREA ||.rti_fn.1||, DATA, READONLY, ALIGN=2

                  __rt_init_uart_init
                  ||__tagsym$$used||
                          DCD      uart_init
                  __rt_init_rgbInit
                  |symbol_number.64|
                          DCD      rgbInit

;*** Start embedded assembler ***

#line 1 "..\\rtthread\\board.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_board_c_3dd12a85____REV16|
#line 463 "..\\Core\\Inc\\cmsis_armcc.h"
|__asm___7_board_c_3dd12a85____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_board_c_3dd12a85____REVSH|
#line 478
|__asm___7_board_c_3dd12a85____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_board_c_3dd12a85____RRX|
#line 665
|__asm___7_board_c_3dd12a85____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
